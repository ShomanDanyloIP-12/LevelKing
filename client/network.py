import requests

BASE_URL = "https://levelking-web.onrender.com/api/"


class APIClient:
    def __init__(self):
        self.access_token = None
        self.refresh_token = None
        self.username = ''

    def register_user(self, username: str, password: str) -> bool:
        url = BASE_URL + 'auth/register/'
        data = {
            'username': username,
            'password': password,
            'password2': password  # <- –æ–±–æ–≤'—è–∑–∫–æ–≤–æ!
        }
        response = requests.post(url, json=data)
        print('Register:', response.status_code, response.text)
        return response.status_code == 201

    def login(self, username: str, password: str) -> bool:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.
        """
        url = BASE_URL + 'auth/token/'
        data = {'username': username, 'password': password}
        response = requests.post(url, json=data)  # üëà –¢—É—Ç —Ç–µ–∂ –∫—Ä–∞—â–µ json=
        if response.status_code == 200:
            tokens = response.json()
            self.access_token = tokens['access']
            self.refresh_token = tokens['refresh']
            self.username = username
            return True
        print('Login:', response.status_code, response.text)
        return False

    def _headers(self):
        """
        –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑ JWT —Ç–æ–∫–µ–Ω–æ–º.
        """
        return {'Authorization': f'Bearer {self.access_token}'}

    def get_public_levels(self):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—É–±–ª—ñ—á–Ω—ñ —Ä—ñ–≤–Ω—ñ.
        """
        url = BASE_URL + 'levels/public/'
        response = requests.get(url, headers=self._headers())
        if response.status_code == 200:
            return response.json()
        print('Public levels error:', response.status_code, response.text)
        return []

    def get_level_by_id(self, level_id: int):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ø–æ ID.
        """
        url = BASE_URL + f'levels/{level_id}/'
        response = requests.get(url, headers=self._headers())
        if response.status_code == 200:
            return response.json()
        print('Level by ID error:', response.status_code, response.text)
        return None

    def get_change_request_by_id(self, change_id):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É –∑–∞ –π–æ–≥–æ ID.
        """
        url = BASE_URL + f'levels/changes/{change_id}/'
        response = requests.get(url, headers=self._headers())
        if response.status_code == 200:
            return response.json()
        print('Change request error:', response.status_code, response.text)
        return None

    def upload_level(self, title, description, data, is_public=True):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
        """
        url = BASE_URL + 'levels/upload/'
        payload = {
            'title': title,
            'description': description,
            'data': data,
            'is_public': is_public
        }
        response = requests.post(url, headers=self._headers(), json=payload)
        return response.status_code == 201

    def get_public_levels_by_author(self, username):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—ñ —Ä—ñ–≤–Ω—ñ –ø–µ–≤–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.
        """
        url = BASE_URL + f'levels/public/by-author/{username}/'
        response = requests.get(url, headers=self._headers())
        if response.status_code == 200:
            return response.json()
        return []

    def propose_change(self, level_id, data, comment=""):
        """
        –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑–º—ñ–Ω –¥–æ —á—É–∂–æ–≥–æ —Ä—ñ–≤–Ω—è.
        """
        url = BASE_URL + f'levels/{level_id}/propose-change/'
        payload = {
            'data': data,
            'comment': comment
        }
        response = requests.post(url, headers=self._headers(), json=payload)
        return response.status_code == 201

    def view_change_requests(self):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—É –¥–æ –≤–ª–∞—Å–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤.
        """
        url = BASE_URL + 'levels/changes/'
        response = requests.get(url, headers=self._headers())
        if response.status_code == 200:
            return response.json()
        print('Change requests error:', response.status_code, response.text)
        return []

    def accept_change(self, level_id, change_id):
        """
        –°—Ö–≤–∞–ª–∏—Ç–∏ –∑–º—ñ–Ω—É –¥–æ —Ä—ñ–≤–Ω—è.
        """
        url = BASE_URL + f'levels/{level_id}/changes/{change_id}/accept/'
        response = requests.post(url, headers=self._headers())
        return response.status_code == 200

    def reject_change(self, level_id, change_id):
        """
        –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–º—ñ–Ω—É –¥–æ —Ä—ñ–≤–Ω—è.
        """
        url = BASE_URL + f'levels/{level_id}/changes/{change_id}/reject/'
        response = requests.post(url, headers=self._headers())
        return response.status_code == 200

    def delete_level(self, level_id):
        """
        –í–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å.
        """
        url = BASE_URL + f'levels/{level_id}/delete/'
        response = requests.delete(url, headers=self._headers())
        return response.status_code == 204

    def edit_level(self, level_id, **kwargs):
        """
        –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å. –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏:
        - title
        - description
        - data
        - is_public
        """
        url = BASE_URL + f'levels/{level_id}/edit/'
        response = requests.patch(url, headers=self._headers(), json=kwargs)
        return response.status_code == 200

    def delete_account(self) -> bool:
        """
        –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
        """
        url = BASE_URL + 'auth/delete/'
        response = requests.delete(url, headers=self._headers())
        print("Delete account:", response.status_code, response.text)
        return response.status_code == 204